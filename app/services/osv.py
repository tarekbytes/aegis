import httpx
from typing import Dict, List, Optional

from packaging.requirements import Requirement
from packaging.version import Version, InvalidVersion


OSV_API_URL = "https://api.osv.dev/v1/querybatch"


def _get_exact_version(req: Requirement) -> Optional[str]:
    """
    Extracts the exact version from a requirement, if specified with '=='.
    Returns None if the version is not pinned or uses other specifiers.
    """
    if not req.specifier:
        return None
    
    spec = next(iter(req.specifier), None)
    if spec and spec.operator == "==":
        try:
            # Validate that it's a valid version string
            return str(Version(spec.version))
        except InvalidVersion:
            return None
    return None


async def query_osv_batch(requirements: List[Requirement]) -> Dict:
    """
    Queries the OSV API with a batch of requirements using package URLs (purls).

    NOTE: This function currently has two main limitations:
    1.  It only processes requirements with exact version specifiers (e.g., '==1.2.3').
        This is based on the assumption that the requirements file was generated by a
        tool like 'pip freeze'. In the future, this service will install the
        dependencies from the requirements file itself to determine the exact
        versions before querying.
    2.  It only constructs purls for the 'pypi' ecosystem. It does not handle
        requirements that point to Git repositories or other sources.
    """
    queries = []
    for req in requirements:
        version = _get_exact_version(req)
        if version:
            queries.append(
                {
                    "package": {"purl": f"pkg:pypi/{req.name}@{version}"}
                }
            )

    if not queries:
        return {"results": []}

    async with httpx.AsyncClient() as client:
        response = await client.post(OSV_API_URL, json={"queries": queries})
        response.raise_for_status()
        return response.json() 